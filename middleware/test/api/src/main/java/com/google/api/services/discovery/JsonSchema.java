package com.google.api.services.discovery;

import java.util.List;
import java.util.Map;

import org.codehaus.jackson.annotate.JsonCreator;
import org.codehaus.jackson.annotate.JsonProperty;

public class JsonSchema {
	/**
	 * A reference to another schema. The value of this property is the "id" of
	 * another schema.
	 */
	public final String $ref;

	/**
	 * If this is a schema for an object, this property is the schema for any
	 * additional properties with dynamic keys on this object.
	 */
	public final JsonSchema additionalProperties;

	/**
	 * Additional information about this property.
	 */
	public final Annotations annotations;

	/**
	 * The default value of this property (if one exists).
	 */
	public final String default_;

	/**
	 * A description of this object.
	 */
	public final String description;

	/**
	 * Values this parameter may take (if it is an enum).
	 */
	public final List<String> enum_;

	/**
	 * The descriptions for the enums. Each position maps to the corresponding
	 * value in the "enum" array.
	 */
	public final List<String> enumDescriptions;

	/**
	 * An additional regular expression or key that helps constrain the value.
	 * For more details see:
	 * http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
	 */
	public final String format;

	/**
	 * Unique identifier for this schema.
	 */
	public final String id;

	/**
	 * If this is a schema for an array, this property is the schema for each
	 * element in the array.
	 */
	public final JsonSchema items;

	/**
	 * Whether this parameter goes in the query or the path for REST requests.
	 */
	public final String location;

	/**
	 * The maximum value of this parameter.
	 */
	public final String maximum;

	/**
	 * The minimum value of this parameter.
	 */
	public final String minimum;

	/**
	 * The regular expression this parameter must conform to. Uses Java 6 regex
	 * format:
	 * http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
	 */
	public final String pattern;

	/**
	 * If this is a schema for an object, list the schema for each property of
	 * this object.
	 */
	public final Map<String, JsonSchema> properties;

	/**
	 * The value is read-only, generated by the service. The value cannot be
	 * modified by the client. If the value is included in a POST, PUT, or PATCH
	 * request, it is ignored by the service.
	 */
	public final boolean readOnly;

	/**
	 * Whether this parameter may appear multiple times.
	 */
	public final boolean repeated;

	/**
	 * Whether the parameter is required.
	 */
	public final boolean required;

	/**
	 * The value type for this schema. A list of values can be found here:
	 * http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1
	 */
	public final String type;

	@JsonCreator
	public JsonSchema(
			@JsonProperty("$ref") final String $ref,
			@JsonProperty("additionalProperties") final JsonSchema additionalProperties,
			@JsonProperty("annotations") final Annotations annotations,
			@JsonProperty("default") final String default_,
			@JsonProperty("description") final String description,
			@JsonProperty("enum") final List<String> enum_,
			@JsonProperty("enumDescriptions") final List<String> enumDescriptions,
			@JsonProperty("format") final String format,
			@JsonProperty("id") final String id,
			@JsonProperty("items") final JsonSchema items,
			@JsonProperty("location") final String location,
			@JsonProperty("maximum") final String maximum,
			@JsonProperty("minimum") final String minimum,
			@JsonProperty("pattern") final String pattern,
			@JsonProperty("properties") final Map<String, JsonSchema> properties,
			@JsonProperty("readOnly") final boolean readOnly,
			@JsonProperty("repeated") final boolean repeated,
			@JsonProperty("required") final boolean required,
			@JsonProperty("type") final String type) {
		this.$ref = $ref;
		this.additionalProperties = additionalProperties;
		this.annotations = annotations;
		this.default_ = default_;
		this.description = description;
		this.enum_ = enum_;
		this.enumDescriptions = enumDescriptions;
		this.format = format;
		this.id = id;
		this.items = items;
		this.location = location;
		this.maximum = maximum;
		this.minimum = minimum;
		this.pattern = pattern;
		this.properties = properties;
		this.readOnly = readOnly;
		this.repeated = repeated;
		this.required = required;
		this.type = type;
	}

	/**
	 * Additional information about this property.
	 */
	public static class Annotations {
		/**
		 * A list of methods for which this property is required on requests.
		 */
		public final List<String> required;

		@JsonCreator
		public Annotations(@JsonProperty("required") final List<String> required) {
			this.required = required;
		}

	}
}
